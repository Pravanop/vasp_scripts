import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
from scipy.optimize import curve_fit

mpl.rc('font' , family = 'Helvetica')

def flipper(arr) :
	arr = np.array(arr)
	arr = arr.astype(int)
	temp = np.flip(arr[1 :])
	return np.concatenate((temp , arr))

p42nmc = {
		0.00 : flipper(
				[0 , 4 , 14 , 25 , 34 , 39 , 39 , 35 , 28 , 18 , 7 , -3 , -9 , -10 , -4 , 10 , 33 , 68 , 115 , 174]
				) ,
		0.02 : flipper(
				[0 , 4 , 15 , 26 , 36 , 42 , 43 , 39 , 32 , 21 , 11 , 1 , -5 , -6 , -1 , 14 , 38 , 73 , 121 , 183]
				) ,
		0.04 : flipper(
				[0 , 5 , 19 , 34 , 46 , 53 , 54 , 50 , 42 , 31 , 19 , 8 , 1 , -1 , 6 , 23 , 51 , 93 , 149 , 222]
				) ,
		0.06 : flipper(
				[0 , 7 , 24 , 43 , 58 , 66 , 69 , 65 , 56 , 44 , 31 , 19 , 11 , 9 , 16 , 34 , 66 , 113 , 176 , 258]
				) ,
		0.08 : flipper(
				[0 , 0 , 2 , 3 , 3 , 1 , -4 , -11 , -21 , -33 , -45 , -55 , -63 , -64 , -58 , -44 , -20 , 15 , 60 ,
				 116]
				) ,
		0.12 : flipper(
				[0 , 13 , 41 , 74 , 104 , 124 , 133 , 131 , 122 , 108 , 91 , 75 , 64 , 61 , 70 , 94 , 137 , 200 , 287 ,
				 399]
				) ,
		0.14 : flipper(
				[0 , 13 , 41 , 74 , 104 , 124 , 133 , 131 , 122 , 108 , 91 , 75 , 64 , 61 , 70 , 94 , 137 ,
				 200 , 287 , 399]
				) ,
		0.16 : flipper(
				[0 , 14 , 45 , 83 , 118 , 144 , 158 , 160 , 152 , 139 , 123 , 108 , 98 , 96 , 105 , 130 , 174 , 240 ,
				 330 , 446]
				) ,
		0.18 : flipper(
				[0 , 14 , 46 , 85 , 122 , 150 , 167 , 170 , 164 , 152 , 138 , 124 , 114 , 112 , 120 , 144 , 186 , 250 ,
				 337 ,
				 451]
				) ,
		0.20 : flipper(
				[0 , 14 , 48 , 88 , 127 , 158 , 177 , 181 , 177 , 166 , 153 , 139 , 129 , 127 , 135 , 158 , 199 , 262 ,
				 348 , 461]
				)
		}

pbcm = {
		0.00 : flipper(
				[0 , -1 , -5 , -12 , -22 , -35 , -50 , -66 , -83 , -99 , -113 , -124 , -131 , -132 , -126 , -113 ,
				 -90 , -57 , -13 , 44]
				) ,
		0.02 : flipper(
				[-138, -139, -141, -147, -155, -166, -180, -195, -211, -227, -242, -253, -259, -260, -254, -241, -218, -185, -142, -87]
				) ,
		
		0.04 : flipper(
				[-280, -281, -283, -287, -293, -302, -313, -326, -340, -355, -369, -380, -387, -388, -382, -368, -345, -312, -269, -216]
				) ,
		0.06 : flipper(
				[-428, -428, -428, -429, -433, -439, -447, -457, -470, -483, -496, -507, -514, -516, -510, -496, -472, -438, -394, -340]
				) ,
		0.08 : flipper(
				[-579, -578, -578, -576, -576, -579, -583, -590, -600, -612, -624, -634, -642, -643, -638, -623, -599, -564, -519, -464]
				) ,
		0.12 : flipper(
				[-977, -977, -970, -961, -951, -942, -935, -930, -931, -937, -946, -956, -964, -965, -957, -939, -909, -867, -812, -744]
				) ,
		0.14 : flipper(
				[-1122, -1121, -1116, -1106, -1096, -1087, -1080, -1076, -1076, -1082, -1091, -1102, -1109, -1110,
				 -1102, -1084, -1055, -1012, -957, -889]
				) ,
		0.16 : flipper(
				[-1282, -1278, -1265, -1249, -1231, -1214, -1200, -1189, -1185, -1186, -1194, -1203, -1210, -1211, -1204, -1185, -1154, -1111, -1053, -983]
				) ,
		0.18 : flipper(
				[-1403, -1397, -1380, -1359, -1335, -1312, -1291, -1276, -1268, -1267, -1273, -1281, -1288, -1290, -1281, -1262, -1230, -1183, -1122, -1047]
				) ,
		0.20 : flipper(
				[-1579, -1571, -1551, -1524, -1495, -1465, -1438, -1418, -1406, -1401, -1403, -1412, -1419, -1421, -1412, -1392, -1358, -1311, -1248, -1169]
				)
		}
p42nmc_modes = {
		0.00 : [0.41934 , 0.67503 , 0.485 , 0.0921 , 0.19379 , 0.94875] ,
		0.02 : [0.41886 , 0.67402 , 0.47119 , 0.0933 , 0.19365 , 0.94762] ,
		0.04 : [0.41738 , 0.67167 , 0.47002 , 0.09542 , 0.19346 , 0.94488] ,
		0.06 : [0.41619 , 0.66918 , 0.46821 , 0.09705 , 0.19152 , 0.94145] ,
		0.08 : [0.41564 , 0.66822 , 0.46772 , 0.09899 , 0.19091 , 0.94036] ,
		0.12 : [0.4154 , 0.66925 , 0.46276 , 0.10494 , 0.18703 , 0.9384] ,
		0.14 : [0.41463 , 0.66879 , 0.46135 , 0.10716 , 0.18729 , 0.93734] ,
		0.16 : [0.41598 , 0.67256 , 0.4618 , 0.10966 , 0.18608 , 0.9409] ,
		0.18 : [0.41251 , 0.66771 , 0.45983 , 0.11138 , 0.18294 , 0.93451] ,
		0.20 : [0.41318 , 0.66788 , 0.45929 , 0.11276 , 0.18258 , 0.93476]
		}

pbcm_modes = {
		0.00 : [0.40256 , 1.33541 , 1.4123] ,
		0.02 : [0.44628 , 1.31781 , 1.39133] ,
		0.04 : [0.49599 , 1.29515 , 1.38687] ,
		0.06 : [0.52022 , 1.2812 , 1.38279] ,
		0.08 : [0.54655 , 1.26735 , 1.38018] ,
		0.12 : [0.59024 , 1.23908 , 1.37248] ,
		0.14 : [0.60706 , 1.22925 , 1.37098] ,
		0.16 : [0.61821 , 1.21321 , 1.36164] ,
		0.18 : [0.64111 , 1.21091 , 1.37016] ,
		0.20 : [0.65171 , 1.19964 , 1.36523]
		}
no_doping = (-331.54,  217.37,   -9.60)


def pbcm_energy_func(X, a, b) :
	x,y,z = X
	return (-331.53*(x**2) + 217.37*(x**4)- 9.60*(x**6) + -8012.4*z + a*(z**3)*(x**2))

energy_list = []
x_list = []
for key,value in pbcm.items():
	if key >= 0.08:
		g1 = np.linspace(-pbcm_modes[key][0],pbcm_modes[key][0], len(value)).reshape(-1, 1)
		g2 = np.linspace(-pbcm_modes[key][1],pbcm_modes[key][1], len(value)).reshape(-1,1)
		doping = np.array([key]*len(value)).reshape(-1,1)
		x = np.concatenate((g2, g1, doping), axis = 1)
		energy_list.append(value.reshape(-1, 1))
		x_list.append(x)

x_list = np.array(x_list).reshape(6*39, 3).astype(np.float64)
energy_list = np.array(energy_list).reshape(6*39, ).astype(np.float64)
print(x_list.shape, energy_list.shape)

X = (x_list[:,0], x_list[:,1], x_list[:,2])
popt , _ = curve_fit(pbcm_energy_func , X , energy_list)
print(popt)

key = 0.16
g1 = np.linspace(-pbcm_modes[key][0],pbcm_modes[key][0], 39).reshape(-1, 1)
g2 = np.linspace(-pbcm_modes[key][1],pbcm_modes[key][1], 39).reshape(-1,1)
doping = np.array([key]*len(value)).reshape(-1,1)

x = (g2, g1, doping)
pbcm_pred = pbcm_energy_func(x, *popt)
plt.plot(pbcm_pred)
plt.plot(pbcm[key])
plt.legend(["Predicted", "DFT"])
plt.show()
